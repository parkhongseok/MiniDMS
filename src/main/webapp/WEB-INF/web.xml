<?xml version="1.0" encoding="UTF-8"?>

<!--전체 웹 애플리케이션의 진입점
1. Tomcat 서버가 web.xml 읽음
2. ContextLoaderListener 동작
3. context-param을 보고 applicationContext.xml 파일을 읽음
4. ApplicationContext 생성
5. Service, Repository 같은 전역 Bean 등록 완료
-->
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

  <!-- 웹 애플리케이션이 서버(Tomcat) 에 뜰 때, 가장 먼저 ContextLoaderListener가 작동
     즉, ApplicationContext를 만들어서 메모리에 올려주는 역할
     ContextLoaderListener = ApplicationContext를 시작하는 사람(트리거)-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--그럼 ContextLoaderListener는 어디를 참고해서 ApplicationContext를 만들까?
  applicationContext.xml 파일을 읽어서, 그 안에 정의된 Bean들을 스프링 컨테이너(ApplicationContext)에 등록
  ApplicationContext는 무엇?	스프링이 객체를 만들고 저장하고 꺼내주는 전역 저장소 (DI 컨테이너) -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/applicationContext.xml</param-value>
  </context-param>

  <!--  ContextLoaderListener는 전역(Application) 범위의 ApplicationContext를 만든다. (Service, Repository 용)
        DispatcherServlet은 웹 요청(Request) 을 처리하는 별도의 ApplicationContext를 만든다. (Controller, View 용)  -->
  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <!-- 이 DispatcherServlet이 사용할 별도의 설정 파일 -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
    </init-param>

    <!-- 서버 시작 시 DispatcherServlet 자동 실행 -->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- 모든 요청을 DispatcherServlet이 처리하게 지정 -->
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
<!-- H2 콘솔 서블릿 -->
  <servlet>
    <servlet-name>H2Console</servlet-name>
    <servlet-class>org.h2.server.web.WebServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>H2Console</servlet-name>
    <url-pattern>/h2-console/*</url-pattern>
  </servlet-mapping>


  <!-- POST 요청이나 JSP 출력 시 한글 깨짐 방지를 위한 필터 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <!-- 위 필터를 전체 요청에 적용 -->
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

</web-app>
